file_path,long_name,start_line_new,end_line_new,start_line_old,end_line_old,line_num,mod_type,mod
"""src/changes/changes.xml""","""""",-1,-1,-1,-1,77,"""added""","""      <action issue=""COMPRESS-463"" type=""fix"" date=""2018-08-09"">"""
"""src/changes/changes.xml""","""""",-1,-1,-1,-1,78,"""added""","""        ZipArchiveInputStream#read would silently return -1 on a"""
"""src/changes/changes.xml""","""""",-1,-1,-1,-1,79,"""added""","""        corrupted stored entry and even return > 0 after hitting the"""
"""src/changes/changes.xml""","""""",-1,-1,-1,-1,80,"""added""","""        end of the archive."""
"""src/changes/changes.xml""","""""",-1,-1,-1,-1,81,"""added""","""      </action>"""
"""src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java""","""ZipArchiveInputStream::readStored( final byte [ ] buffer , final int offset , final int length)""",510,545,510,544,528,"""deleted""","""                return -1;"""
"""src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java""","""ZipArchiveInputStream::readStored( final byte [ ] buffer , final int offset , final int length)""",510,545,510,544,528,"""added""","""                buf.limit(0);"""
"""src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java""","""ZipArchiveInputStream::readStored( final byte [ ] buffer , final int offset , final int length)""",510,545,510,544,529,"""added""","""                throw new IOException(""Truncated ZIP file"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,99,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,100,"""added""","""                zi.read(buffer);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,101,"""added""","""                fail(""shouldn't be able to read from truncated entry after exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,102,"""added""","""            } catch (final IOException e) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,103,"""added""","""                assertEquals(""Truncated ZIP file"", e.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,104,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java""","""Maven221MultiVolumeTest::testRead7ZipMultiVolumeArchiveForStream()""",69,120,69,113,105,"""added""",""""""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""""",-1,-1,-1,-1,424,"""added""","""    @Test"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,425,"""added""","""    public void singleByteReadThrowsAtEofForCorruptedStoredEntry() throws Exception {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,426,"""added""","""        byte[] content;"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,427,"""added""","""        try (FileInputStream fs = new FileInputStream(getFile(""COMPRESS-264.zip""))) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,428,"""added""","""            content = IOUtils.toByteArray(fs);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,429,"""added""","""        }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,430,"""added""","""        // make size much bigger than entry's real size"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,431,"""added""","""        for (int i = 17; i < 26; i++) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,432,"""added""","""            content[i] = (byte) 0xff;"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,433,"""added""","""        }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,434,"""added""","""        try (ByteArrayInputStream in = new ByteArrayInputStream(content);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,435,"""added""","""             ZipArchiveInputStream archive = new ZipArchiveInputStream(in)) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,436,"""added""","""            ArchiveEntry e = archive.getNextEntry();"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,437,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,438,"""added""","""                IOUtils.toByteArray(archive);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,439,"""added""","""                fail(""expected exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,440,"""added""","""            } catch (IOException ex) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,441,"""added""","""                assertEquals(""Truncated ZIP file"", ex.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,442,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,443,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,444,"""added""","""                archive.read();"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,445,"""added""","""                fail(""expected exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,446,"""added""","""            } catch (IOException ex) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,447,"""added""","""                assertEquals(""Truncated ZIP file"", ex.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,448,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,449,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,450,"""added""","""                archive.read();"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,451,"""added""","""                fail(""expected exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,452,"""added""","""            } catch (IOException ex) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,453,"""added""","""                assertEquals(""Truncated ZIP file"", ex.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,454,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,455,"""added""","""        }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry()""",425,456,-1,-1,456,"""added""","""    }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""""",-1,-1,-1,-1,457,"""added""",""""""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""""",-1,-1,-1,-1,458,"""added""","""    @Test"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,459,"""added""","""    public void multiByteReadThrowsAtEofForCorruptedStoredEntry() throws Exception {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,460,"""added""","""        byte[] content;"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,461,"""added""","""        try (FileInputStream fs = new FileInputStream(getFile(""COMPRESS-264.zip""))) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,462,"""added""","""            content = IOUtils.toByteArray(fs);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,463,"""added""","""        }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,464,"""added""","""        // make size much bigger than entry's real size"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,465,"""added""","""        for (int i = 17; i < 26; i++) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,466,"""added""","""            content[i] = (byte) 0xff;"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,467,"""added""","""        }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,468,"""added""","""        byte[] buf = new byte[2];"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,469,"""added""","""        try (ByteArrayInputStream in = new ByteArrayInputStream(content);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,470,"""added""","""             ZipArchiveInputStream archive = new ZipArchiveInputStream(in)) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,471,"""added""","""            ArchiveEntry e = archive.getNextEntry();"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,472,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,473,"""added""","""                IOUtils.toByteArray(archive);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,474,"""added""","""                fail(""expected exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,475,"""added""","""            } catch (IOException ex) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,476,"""added""","""                assertEquals(""Truncated ZIP file"", ex.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,477,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,478,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,479,"""added""","""                archive.read(buf);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,480,"""added""","""                fail(""expected exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,481,"""added""","""            } catch (IOException ex) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,482,"""added""","""                assertEquals(""Truncated ZIP file"", ex.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,483,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,484,"""added""","""            try {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,485,"""added""","""                archive.read(buf);"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,486,"""added""","""                fail(""expected exception"");"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,487,"""added""","""            } catch (IOException ex) {"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,488,"""added""","""                assertEquals(""Truncated ZIP file"", ex.getMessage());"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,489,"""added""","""            }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,490,"""added""","""        }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry()""",459,491,-1,-1,491,"""added""","""    }"""
"""src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java""","""""",-1,-1,-1,-1,492,"""added""",""""""

file_path,long_name,start_line_new,end_line_new,start_line_old,end_line_old,line_num,mod_type,mod
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,154,"""deleted""","""    int index = encodedJWT.lastIndexOf(""."");"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,154,"""added""","""    // The callers of this decode will have already handled 'none' if it was deemed to be valid based upon"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,155,"""deleted""","""    // The message comprises the first two segments of the entire JWT, the signature is the last segment."""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,155,"""added""","""    // the provided verifiers. At this point, if we have a 'none' algorithm specified in the header, it is invalid."""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,156,"""deleted""","""    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,156,"""added""","""    if (header.algorithm == Algorithm.none) {"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,157,"""added""","""      throw new MissingVerifierException(""No Verifier has been provided for verify a signature signed using ["" + header.algorithm.getName() + ""]"");"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,158,"""added""","""    }"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,170,"""added""","""    int index = encodedJWT.lastIndexOf(""."");"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,171,"""added""","""    // The message comprises the first two segments of the entire JWT, the signature is the last segment."""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,172,"""added""","""    byte[] message = encodedJWT.substring(0, index).getBytes(StandardCharsets.UTF_8);"""
"""src/main/java/org/primeframework/jwt/JWTDecoder.java""","""JWTDecoder::decode( String encodedJWT , Header header , String [ ] parts , Verifier verifier)""",153,193,153,187,173,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_encodedJwtWithSignatureRemoved()""",57,65,57,66,64,"""deleted""","""    expectException(InvalidJWTException.class, ()"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_encodedJwtWithSignatureRemoved()""",57,65,57,66,64,"""added""","""    expectException(InvalidJWTException.class, () -> JWT.getDecoder().decode(hackedJWT, HMACVerifier.newVerifier(""secret"")));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_encodedJwtWithSignatureRemoved()""",57,65,57,66,65,"""deleted""","""        -> JWT.getDecoder().decode(hackedJWT, HMACVerifier.newVerifier(""secret"")));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_noVerification()""",68,74,69,76,73,"""added""","""    expectException(MissingVerifierException.class, () -> JWT.getDecoder().decode(encodedJWT));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_noVerification()""",68,74,69,76,74,"""deleted""","""    expectException(MissingVerifierException.class, ()"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_noVerification()""",68,74,69,76,74,"""added""","""  }"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""""",-1,-1,-1,-1,75,"""deleted""","""        -> JWT.getDecoder().decode(encodedJWT));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""""",-1,-1,-1,-1,75,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""""",-1,-1,-1,-1,76,"""added""","""  @Test"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,77,"""added""","""  public void test_unsecuredJWT_validation() throws Exception {"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,78,"""added""","""    JWT jwt = new JWT().setSubject(""123456789"");"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,79,"""added""","""    Signer signer = new UnsecuredSigner();"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,80,"""added""","""    Verifier hmacVerifier = HMACVerifier.newVerifier(""too many secrets"");"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,81,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,82,"""added""","""    String encodedUnsecuredJWT = JWTEncoder.getInstance().encode(jwt, signer);"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,83,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,84,"""added""","""    // Ensure that attempting to decode an un-secured JWT fails when we provide a verifier"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,85,"""added""","""    expectException(MissingVerifierException.class, () -> JWT.getDecoder().decode(encodedUnsecuredJWT, hmacVerifier));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,86,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,87,"""added""","""    String encodedUnsecuredJWT_withKid = JWTEncoder.getInstance().encode(jwt, signer, (header) -> header.set(""kid"", ""abc""));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,88,"""added""","""    String encodedUnsecuredJWT_withoutKid = JWTEncoder.getInstance().encode(jwt, signer);"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,89,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,90,"""added""","""    Map<String, Verifier> verifierMap = new HashMap<>();"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,91,"""added""","""    verifierMap.put(null, hmacVerifier);"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,92,"""added""","""    verifierMap.put(""abc"", hmacVerifier);"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,93,"""added""",""""""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,94,"""added""","""    // Ensure that attempting to decode an un-secured JWT fails when we provide a verifier with or without using a kid"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,95,"""added""","""    expectException(MissingVerifierException.class, () -> JWT.getDecoder().decode(encodedUnsecuredJWT_withKid, verifierMap));"""
"""src/test/java/org/primeframework/jwt/VulnerabilityTest.java""","""VulnerabilityTest::test_unsecuredJWT_validation()""",77,97,-1,-1,96,"""added""","""    expectException(MissingVerifierException.class, () -> JWT.getDecoder().decode(encodedUnsecuredJWT_withoutKid, verifierMap));"""
